AWSTemplateFormatVersion: 2010-09-09
Description: Password Manager API - REST API and Lambda functions for the endpoints
Transform: AWS::Serverless-2016-10-31

Parameters:
  UserPoolArn:
    Description: User Pool ARN to be used on authorizer
    Type: String
  DBClusterArn:
    Description: Aurora DB cluster Arn.
    Type: String
  DBName:
    Description: Aurora database name.
    Type: String
  SecretArn:
    Description: Secrets Manager Secret ARN
    Type: String
  FrontEndURL:
    Description: FrontEnd URL to enable CORS
    Type: String
    Default: "*"

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  # Password Manager API
  MyAPI:
    Type: AWS::Serverless::Api
    Description: Password Manager API
    Properties:
      EndpointConfiguration: REGIONAL
      StageName: dev
      Cors:
        AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,Key,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub "'${FrontEndURL}'"
        MaxAge: "'500'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn

  # GET / - root endpoint
  RootEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Password Manager API GET /.
      Handler: index.handler
      Runtime: nodejs16.x
      InlineCode: >
        exports.handler = async (event) => {
          const response = {
              statusCode: 200,
              body: JSON.stringify('API Working!'),
          };
          return response;
        };
      Events:
        RootGet:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref MyAPI

  # GET /entries - get entry by id endpoint
  GetEntryEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Password Manager API GET /entries.
      Handler: index.handler
      Runtime: nodejs16.x
      InlineCode: >
        var AWS = require('aws-sdk');
        const rdsDataService = new AWS.RDSDataService();

        exports.handler = async (event, context, callback) => {
          
          let responseFailBuild = function(message) {
            return {
              statusCode: 500,
              body: JSON.stringify({
                success: false,
                message: message
              })
            };
          };
          
          let result = new Promise((res, rej)=>{
            let secretARN = process.env.SecretArn;
            if(!event.requestContext.authorizer.claims.sub) {
              res(responseFailBuild("User information not found!"));
            }
            // query validation done in API Gateway 
            // if(!event.headers.key) {
            //   res(responseFailBuild("Unable to decrypt password!"));
            // }
            let encKey = event.headers.Key;
            
            // if(!event.queryStringParameters || !event.queryStringParameters.id) {
            //   res(responseFailBuild("Password not found!"));
            // }
            
            let sqlParams = {
              secretArn: secretARN,
              resourceArn: process.env.DBClusterArn,
              sql: `SELECT id, cognito_id, service, description, link, login, PGP_SYM_DECRYPT(password::bytea, '${encKey}') as password, marker from entries WHERE id = ${event.queryStringParameters.id} AND cognito_id = '${event.requestContext.authorizer.claims.sub}';`,
              database: process.env.DBName,
              includeResultMetadata: true
            };
            
            rdsDataService.executeStatement(sqlParams, function (err, data) {
              if (err) {
                // error
                console.log(err);
                res(responseFailBuild("Password not found!"));
              } else {
                // init
                var rows = [];
                var cols =[];
          
                // build an array of columns
                data.columnMetadata.map((v, i) => {
                  cols.push(v.name);
                });
          
                // build an array of rows: { key=>value }
                data.records.map((r) => {
                  var row = {};
                  r.map((v, i) => {
                    if (v.stringValue !== undefined) { row[cols[i]] = v.stringValue; }
                    else if (v.blobValue !== undefined) { row[cols[i]] = v.blobValue; }
                    else if (v.doubleValue !== undefined) { row[cols[i]] = v.doubleValue; }
                    else if (v.longValue !== undefined) { row[cols[i]] = v.longValue; }
                    else if (v.booleanValue !== undefined) { row[cols[i]] = v.booleanValue; }
                    else { row[cols[i]] = null; }
                  });
                  rows.push(row);
                });
          
                if(rows.length === 0) {
                  res(responseFailBuild("Password not found!"));
                }
          
                res({
                  statusCode: 200,
                  body: JSON.stringify({
                    success: true,
                    message: "Password found!",
                    data: rows
                  })
                });
              }
            });
          });
          
          return result;
          
        }
      Events:
        GETEntry:
          Type: Api
          Properties:
            Path: /entries
            Method: get
            RestApiId: !Ref MyAPI
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DBName
          SecretArn: !Ref SecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
            - Effect: Allow
              Action: "rds-data:ExecuteStatement"
              Resource: !Ref DBClusterArn

  # POST /entries - insert new entry endpoint
  CreateEntryEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Password Manager API POST /entries.
      Handler: index.handler
      Runtime: nodejs16.x
      InlineCode: >
        var AWS = require('aws-sdk');
        const rdsDataService = new AWS.RDSDataService();

        exports.handler = async (event) => {
          let result = new Promise((res,rej) => {
            try {
              if(!event.requestContext.authorizer.claims.sub) {
                throw new Error("User information not found!");
              }
              const requestBody = JSON.parse(event.body);
          
              let secretARN = process.env.SecretArn;
              // if(!event.headers.key) {
              //     throw new Error("Unable to encrypt password!");
              // }
              let enc_key = event.headers.Key;

              let sqlParams = {
                secretArn: secretARN,
                resourceArn: process.env.DBClusterArn,
                sql: `INSERT INTO entries (cognito_id,service,description,link,login,password,marker) VALUES ('${event.requestContext.authorizer.claims.sub}','${requestBody.service}','${requestBody.description}', '${requestBody.link}', '${requestBody.login}', PGP_SYM_ENCRYPT('${requestBody.password}', '${enc_key}'),${requestBody.marker});`,
                database: process.env.DBName,
                includeResultMetadata: true
              };
              rdsDataService.executeStatement(sqlParams, function (err, data) {
                if (err) {
                  console.log(err);
                  throw new Error("Error found on creation of new password!");
                } else {
                  res({
                    statusCode: 200,
                    body: JSON.stringify({
                      success: true,
                      message: "Password created sucessfully!"
                    })
                  });
                }
              });
            } catch(e) {
              res({
                  statusCode: 500,
                body: JSON.stringify({
                  success: false,
                  message: e.message
                })
              });
            }
          })
          
          return result;
        };
      Events:
        POSTEntry:
          Type: Api
          Properties:
            Path: /entries
            Method: post
            RestApiId: !Ref MyAPI
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DBName
          SecretArn: !Ref SecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
            - Effect: Allow
              Action: "rds-data:ExecuteStatement"
              Resource: !Ref DBClusterArn

  # DELETE /entries - delete user entry by id endpoint
  DeleteEntryEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Password Manager API DELETE /entries.
      Handler: index.handler
      Runtime: nodejs16.x
      InlineCode: >
        var AWS = require('aws-sdk');
        const rdsDataService = new AWS.RDSDataService();

        exports.handler = async (event, context, callback) => {
          
          let responseFailBuild = function(message) {
            return {
              statusCode: 500,
              body: JSON.stringify({
                success: false,
                message: message
              })
            };
          };
          
          let result = new Promise((res, rej)=>{
            let secretARN = process.env.SecretArn;
            if(!event.requestContext.authorizer.claims.sub) {
              res(responseFailBuild("User information not found!"));
            }
            
            let sqlParams = {
              secretArn: secretARN,
              resourceArn: process.env.DBClusterArn,
              sql: `DELETE FROM entries WHERE id = ${event.queryStringParameters.id} AND cognito_id = '${event.requestContext.authorizer.claims.sub}';`,
              database: process.env.DBName,
              includeResultMetadata: true
            };
            
            rdsDataService.executeStatement(sqlParams, function (err, data) {
              if (err) {
                // error
                console.log(err);
                res(responseFailBuild("Password not found!"));
              } else {
                console.log(data);
                if(data.numberOfRecordsUpdated === 0) {
                  res(responseFailBuild("Password not found!"));
                }
                res({
                  statusCode: 200,
                  body: JSON.stringify({
                    success: true,
                    message: "Password removed successfully!"
                  })
                });
              }
            });
          });
          
          return result;
          
        }
      Events:
        DELETEEntry:
          Type: Api
          Properties:
            Path: /entries
            Method: delete
            RestApiId: !Ref MyAPI
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DBName
          SecretArn: !Ref SecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
            - Effect: Allow
              Action: "rds-data:ExecuteStatement"
              Resource: !Ref DBClusterArn


  # GET /list - list user entries endpoint
  ListEntryEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Password Manager API GET /list.
      Handler: index.handler
      Runtime: nodejs16.x
      InlineCode: >
        var AWS = require('aws-sdk');
        const rdsDataService = new AWS.RDSDataService();

        exports.handler = async (event, context, callback) => {
          
          let responseFailBuild = function(message) {
            return {
              statusCode: 500,
              headers: { 
                "Access-Control-Allow-Headers" : "Content-Type",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": true,
                "Access-Control-Allow-Methods": "OPTIONS,POST,PUT,DELETE,GET"
              },
              body: JSON.stringify({
                success: false,
                message: message
              })
            };
          };
          
          let result = new Promise((res, rej)=>{
            let secretARN = process.env.SecretArn;
            if(!event.requestContext.authorizer.claims.sub) {
              res(responseFailBuild("User information not found!"));
            }
            
            let encKey = event.headers.Key;
            
            if(event.queryStringParameters.page < 1) {
              res(responseFailBuild("Invalid page selected"));
            }
            if(event.queryStringParameters.perPage > 50) {
              res(responseFailBuild("Unable to list more than 50 items per page"));
            }
            
            let page = event.queryStringParameters.page;
            let perPage = event.queryStringParameters.perPage;
            
            let sqlParams = {
              secretArn: secretARN,
              resourceArn: process.env.DBClusterArn,
              sql: `SELECT id, cognito_id, service, description, link, login, PGP_SYM_DECRYPT(password::bytea, '${encKey}') as password, marker from entries WHERE cognito_id = '${event.requestContext.authorizer.claims.sub}' LIMIT ${perPage} OFFSET ${perPage * (page - 1)};`,
              database: process.env.DBName,
              includeResultMetadata: true
            };
            
            let sqlCountParams = {
              secretArn: secretARN,
              resourceArn: process.env.DBClusterArn,
              sql: `SELECT COUNT(*) FROM entries WHERE cognito_id = '${event.requestContext.authorizer.claims.sub}';`,
              database: process.env.DBName,
              includeResultMetadata: true
            };
            
            rdsDataService.executeStatement(sqlParams, function (err, data) {
              if (err) {
                // error
                console.log(err);
                res(responseFailBuild("Error while retrieving entries!"));
              } else {
                // init
                var rows = [];
                var cols =[];
          
                // build an array of columns
                data.columnMetadata.map((v, i) => {
                  cols.push(v.name);
                });
          
                // build an array of rows: { key=>value }
                data.records.map((r) => {
                  var row = {};
                  r.map((v, i) => {
                    if (v.stringValue !== undefined) { row[cols[i]] = v.stringValue; }
                    else if (v.blobValue !== undefined) { row[cols[i]] = v.blobValue; }
                    else if (v.doubleValue !== undefined) { row[cols[i]] = v.doubleValue; }
                    else if (v.longValue !== undefined) { row[cols[i]] = v.longValue; }
                    else if (v.booleanValue !== undefined) { row[cols[i]] = v.booleanValue; }
                    else { row[cols[i]] = null; }
                  });
                  rows.push(row);
                });
                rdsDataService.executeStatement(sqlCountParams, function (err, data) {
                  if (err) {
                    // error
                    console.log(err);
                    res(responseFailBuild("Unable to count entries!"));
                  } else {
                    const total = data.records[0][0].longValue;
                    res({
                      statusCode: 200,
                      headers: { 
                        "Access-Control-Allow-Headers" : "Content-Type",
                        "Access-Control-Allow-Origin": "*",
                        "Access-Control-Allow-Credentials": true,
                        "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                      },
                      body: JSON.stringify({
                        success: true,
                        message: "Passwords found!",
                        data: rows,
                        query: {
                          page: event.queryStringParameters.page,
                          perPage: event.queryStringParameters.perPage,
                          previous: event.queryStringParameters.page > 1,
                          next: event.queryStringParameters.page * event.queryStringParameters.perPage < total,
                          total: total
                        }
                      })
                    });
                  }
                });
              }
            });
          });
          
          return result;
          
        }
      Events:
        GETList:
          Type: Api
          Properties:
            Path: /list
            Method: get
            RestApiId: !Ref MyAPI
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DBName
          SecretArn: !Ref SecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
            - Effect: Allow
              Action: "rds-data:ExecuteStatement"
              Resource: !Ref DBClusterArn

  # GET /search - search user entries endpoint
  SearchEntryEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Password Manager API GET /search.
      Handler: index.handler
      Runtime: nodejs16.x
      InlineCode: >
        var AWS = require('aws-sdk');
        const rdsDataService = new AWS.RDSDataService();

        exports.handler = async (event, context, callback) => {
          
          let responseFailBuild = function(message) {
            return {
              statusCode: 500,
              headers: { 
                "Access-Control-Allow-Headers" : "Content-Type",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": true,
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT,DELETE"
              },
              body: JSON.stringify({
                success: false,
                message: message
              })
            };
          };
          
          let result = new Promise((res, rej)=>{
            let secretARN = process.env.SecretArn;
            if(!event.requestContext.authorizer.claims.sub) {
              res(responseFailBuild("User information not found!"));
            }
            
            let encKey = event.headers.Key;
            
            if(event.queryStringParameters.perPage > 50) {
              res(responseFailBuild("Unable to list more than 50 items per page"));
            }
            
            let perPage = event.queryStringParameters.perPage;
            let search = event.queryStringParameters.search;
            
            let sqlParams = {
              secretArn: secretARN,
              resourceArn: process.env.DBClusterArn,
              sql: `SELECT id, cognito_id, service, description, link, login, PGP_SYM_DECRYPT(password::bytea, '${encKey}') as password, marker from entries WHERE cognito_id = '${event.requestContext.authorizer.claims.sub}' AND (service ILIKE '%${search}%' OR description ILIKE '%${search}%' OR login ILIKE '%${search}%') LIMIT ${perPage};`,
              database: process.env.DBName,
              includeResultMetadata: true
            };
            
            rdsDataService.executeStatement(sqlParams, function (err, data) {
              if (err) {
                // error
                console.log(err);
                res(responseFailBuild("Password not found!"));
              } else {
                // init
                var rows = [];
                var cols =[];
          
                // build an array of columns
                data.columnMetadata.map((v, i) => {
                  cols.push(v.name);
                });
          
                // build an array of rows: { key=>value }
                data.records.map((r) => {
                  var row = {};
                  r.map((v, i) => {
                    if (v.stringValue !== undefined) { row[cols[i]] = v.stringValue; }
                    else if (v.blobValue !== undefined) { row[cols[i]] = v.blobValue; }
                    else if (v.doubleValue !== undefined) { row[cols[i]] = v.doubleValue; }
                    else if (v.longValue !== undefined) { row[cols[i]] = v.longValue; }
                    else if (v.booleanValue !== undefined) { row[cols[i]] = v.booleanValue; }
                    else { row[cols[i]] = null; }
                  });
                  rows.push(row);
                });
          
                res({
                  statusCode: 200,
                  headers: { 
                    "Access-Control-Allow-Headers" : "Content-Type",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Credentials": true,
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                  },
                  body: JSON.stringify({
                    success: true,
                    message: "Passwords found!",
                    data: rows
                  })
                });
              }
            });
          });
          
          return result;
          
        }
      Events:
        GETSearch:
          Type: Api
          Properties:
            Path: /search
            Method: get
            RestApiId: !Ref MyAPI
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DBName
          SecretArn: !Ref SecretArn
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
            - Effect: Allow
              Action: "rds-data:ExecuteStatement"
              Resource: !Ref DBClusterArn

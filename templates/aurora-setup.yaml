AWSTemplateFormatVersion: 2010-09-09
Description: Passremind API - Aurora database and tables setup
Transform: AWS::Serverless-2016-10-31

Parameters:
  DBClusterName:
    Description: Aurora DB cluster name.
    Type: String
    Default: app-test-cluster
  DatabaseName:
    Description: Aurora database name.
    Type: String
    Default: app_test_db
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_]*'
    ConstraintDescription: Must begin with a letter and only contain alphanumeric characters.
  DBAdminUserName:
    Description: The admin user name.
    Type: String
    Default: admin_user
    MinLength: '2'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9_]+'
    ConstraintDescription: Must be between 2 to 16 alphanumeric characters.

Resources:
  # Secrets Manager secret
  DBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${DBClusterName}-AuroraUserSecret'
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBAdminUserName}"}'
        GenerateStringKey: password
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  # Aurora Serverless DB Cluster with Data API
  AuroraCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      DBClusterIdentifier: !Ref DBClusterName
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:password}}'
      DatabaseName: !Ref DatabaseName
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: "10.18"
      # Enable the Data API for Aurora Serverless
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 4
        SecondsUntilAutoPause: 3600

  # getAllItemsFunction:
  TableCreationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: >
        const AWS = require("aws-sdk");
        const rdsDataService = new AWS.RDSDataService();

        async function RunCommand(sqlStatement){
          // Prepare the SQL parameters required for Data API
          let sqlParams = {
            secretArn: process.env.SecretArn,
            resourceArn: process.env.DBClusterArn,
            sql: sqlStatement,
            database: process.env.DBName,
            includeResultMetadata: true,
          };

          // Use the Data API ExecuteStatement operation to run the SQL command
          const result = await rdsDataService.executeStatement(sqlParams).promise();
          return result;
        }

        exports.handler = async (event, context) => {
          try {
            // Log event object and database name to CloudWatch Logs
            console.log("Starting Table Creation!");
            console.log("Database Name: ", process.env.DBName);

            // Create SQL statements
            const sqlCreateUserTable = "CREATE TABLE IF NOT EXISTS users ( id SERIAL PRIMARY KEY, cognito_id VARCHAR(50) NOT NULL UNIQUE, photo VARCHAR(255), name VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL );"
            const sqlCreateEntriesTable = "CREATE TABLE IF NOT EXISTS entries ( id SERIAL PRIMARY KEY, cognito_id VARCHAR(50) NOT NULL, service VARCHAR(50) NOT NULL, description VARCHAR(255), link VARCHAR(127), login VARCHAR(50), password TEXT NOT NULL, marker BOOLEAN, CONSTRAINT fk_customer FOREIGN KEY(cognito_id) REFERENCES users(cognito_id) );"
            const sqlCreateExtension = "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
            // const sqlSelect = "select table_name from information_schema.tables where table_name = 'users' OR table_name = 'entries';";

            // Run the SQL commands one at a time
            await RunCommand(sqlCreateUserTable);
            await RunCommand(sqlCreateEntriesTable);
            await RunCommand(sqlCreateExtension);

            const responseData = {
              Data: "tables created!"
            };
            return responseData;
          } catch (error) {
            const responseData = {
              Data: error
            };
            return responseData;
          }
        };
      Runtime: nodejs16.x
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          DBClusterArn: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
          DBName: !Ref DatabaseName
          SecretArn: !Ref DBSecret
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DBSecret
        - Statement:
          - Effect: Allow
            Action: 'rds-data:ExecuteStatement'
            Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'

Outputs:
  TableCreationFunction:
    Description: Table creation function
    Value: !Ref TableCreationFunction
  SecretArn:
    Description: Secrets Manager Secret ARN
    Value: !Ref DBSecret
  DBAdminUserName:
    Description: Aurora Database Admin User
    Value: !Ref DBAdminUserName

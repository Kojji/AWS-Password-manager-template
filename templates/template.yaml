AWSTemplateFormatVersion: 2010-09-09
Description: Passremind API - template for a personal use password manager API 
Transform: AWS::Serverless-2016-10-31

Parameters:
  DBClusterName:
    Description: Aurora DB cluster name.
    Type: String
    Default: app-test-cluster
  DatabaseName:
    Description: Aurora database name.
    Type: String
    Default: app_test_db
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_]*'
    ConstraintDescription: Must begin with a letter and only contain alphanumeric characters.
  DBAdminUserName:
    Description: The admin user name.
    Type: String
    Default: admin_user
    MinLength: '2'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9_]+'
    ConstraintDescription: Must be between 2 to 16 alphanumeric characters.

Resources:
  # Secrets Manager secret
  DBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${DBClusterName}-AuroraUserSecret'
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBAdminUserName}"}'
        GenerateStringKey: password
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  # Aurora Serverless DB Cluster with Data API
  AuroraCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      DBClusterIdentifier: !Ref DBClusterName
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:password}}'
      DatabaseName: !Ref DatabaseName
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: "10.18"
      # Enable the Data API for Aurora Serverless
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 4
        SecondsUntilAutoPause: 3600
  # getAllItemsFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/get-all-items.getAllItemsHandler
  #     Runtime: nodejs16.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref SampleTable
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         SAMPLE_TABLE: !Ref SampleTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /
  #           Method: GET
  # # Each Lambda function is defined by properties:
  # # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # # This is a Lambda function config associated with the source code: get-by-id.js
  # getByIdFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/get-by-id.getByIdHandler
  #     Runtime: nodejs16.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref SampleTable
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         SAMPLE_TABLE: !Ref SampleTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /{id}
  #           Method: GET
  # # Each Lambda function is defined by properties:
  # # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # # This is a Lambda function config associated with the source code: put-item.js
  # putItemFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/put-item.putItemHandler
  #     Runtime: nodejs16.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref SampleTable
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         SAMPLE_TABLE: !Ref SampleTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /
  #           Method: POST
  # # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  # SampleTable:
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     PrimaryKey:
  #       Name: id
  #       Type: String
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2

Outputs:
  # SampleTable:
  #   Description: "DynamoDB table"
  #   Value: !Ref SampleTable
  SecretArn:
    Description: Secrets Manager Secret ARN
    Value: !Ref DBSecret
  DBAdminUserName:
    Description: Aurora Database Admin User
    Value: !Ref DBAdminUserName

  # WebEndpoint:
  #   Description: "API Gateway endpoint URL for Prod stage"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# AWSTemplateFormatVersion: 2010-09-09
# Transform: 'AWS::Serverless-2016-10-31'
# Description: An AWS Lambda function and an Amazon Aurora Serverless DB cluster with Data API and a Secrets Manager secret

# # Global values that are applied to all applicable resources in this template
# Globals:
#   Function:
#     CodeUri: ./src
#     Runtime: nodejs14.x
#     MemorySize: 128
#     Timeout: 30



# Resources:
  
#   
#   # Lambda Function - uses Globals to define additional configuration values
#   LambdaFunction:
#     Type: 'AWS::Serverless::Function'
#     Properties:
#       FunctionName: !Sub '${DBClusterName}-function'
#       Handler: app.handler
#       # Function environment variables
#       Environment:
#         Variables:
#           DBClusterArn: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
#           DBName: !Ref DatabaseName
#           SecretArn: !Ref DBSecret
#       # Creates an IAM Role that defines the services the function can access and which actions the function can perform
#       Policies:
#         - AWSSecretsManagerGetSecretValuePolicy:
#             SecretArn: !Ref DBSecret
#         - Statement:
#           - Effect: Allow
#             Action: 'rds-data:ExecuteStatement'
#             Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'

# Outputs:
#   DBClusterArn:
#     Description: Aurora DB Cluster Resource ARN
#     Value: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
#   DBClusterEndpoint:
#     Description: Aurora DB Cluster Endpoint Address
#     Value: !GetAtt AuroraCluster.Endpoint.Address
#   DBName:
#     Description: Aurora Database Name
#     Value: !Ref DatabaseName
  
#   

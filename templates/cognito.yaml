AWSTemplateFormatVersion: 2010-09-09
Description: Password Manager API - Cognito user pool and client setup
Transform: AWS::Serverless-2016-10-31

Parameters:
  AdminCreateUser:
    Description: Variable for 'AllowAdminCreateUserOnly' for User Pool
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  MfaEnable: 
    Description: Variable to define if MFA is enabled or not
    Type: String
    Default: 'OPTIONAL'
    AllowedValues:
      - 'ON'
      - 'OPTIONAL'
  CallbackURLLogin:
    Description: Callback URL for the login flow 
    Type: String
    Default: http://localhost
  CallbackURLLogout:
    Description: Callback URL for the logout flow 
    Type: String
    Default: http://localhost
  DBClusterArn:
    Description: Aurora DB cluster Arn.
    Type: String
  DBName:
    Description: Aurora database name.
    Type: String
  SecretArn: 
    Description: Secrets Manager Secret ARN
    Type: String

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Ref AdminCreateUser
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: given_name
          Required: true
        - AttributeDataType: String
          Mutable: true
          Name: family_name
          Required: true
        - AttributeDataType: String
          Mutable: false
          Name: email
          Required: true
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      MfaConfiguration: !Ref MfaEnable
      EnabledMfas: 
        - SOFTWARE_TOKEN_MFA

  # Cognito User Pool Domain 
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: password-manager-login
      UserPoolId: !Ref UserPool

  # Cognito User Pool Client
  WebAppCognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 1
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - !Ref CallbackURLLogin
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      IdTokenValidity: 1
      LogoutURLs:
        - !Ref CallbackURLLogout
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - given_name
        - family_name
        - email
        - email_verified
      RefreshTokenValidity: 1
      SupportedIdentityProviders:
        - COGNITO
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      UserPoolId: !Ref UserPool

   # User Register Function
  UserRowCreation:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to auto create user on cognito registrer.
      Handler: index.handler
      Runtime: nodejs16.x
      InlineCode: >
        var AWS = require('aws-sdk');
        const rdsDataService = new AWS.RDSDataService();

        exports.handler = (event, context, callback) => {
          // TODO implement
          let secretARN = process.env.SecretArn
          let clusterARN = process.env.DBClusterArn
          let databaseName = process.env.DBName

          if(event.triggerSource !== 'PostConfirmation_ConfirmSignUp') {
            callback(null, event)
          }

          let sqlParams = {
              secretArn: secretARN,
              resourceArn: clusterARN,
              sql: `INSERT INTO users (cognito_id, name, email) VALUES ('${event.request.userAttributes.sub}', '${event.request.userAttributes.given_name}', '${event.request.userAttributes.email}');`,
              database: databaseName,
              includeResultMetadata: true
            }
            
          rdsDataService.executeStatement(sqlParams, function (err, data) {
            if (err) {
              console.log(err)
            } else {
              console.log(event.request.userAttributes.sub + ' created successfully')
            }
          })
          callback(null, event)
        };
      Environment:
        Variables:
          DBClusterArn: !Ref DBClusterArn
          DBName: !Ref DBName
          SecretArn: !Ref SecretArn
      Events:
        CognitoEvent:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
        - Statement:
          - Effect: Allow
            Action: 'rds-data:ExecuteStatement'
            Resource: !Ref DBClusterArn


Outputs:
  UserPool:
    Description:  User Pool
    Value: !Ref UserPool
  UserPoolArn:
    Description:  User Pool
    Value: !GetAtt UserPool.Arn
  WebAppCognitoClient:
    Description: User Pool Client
    Value: !Ref WebAppCognitoClient